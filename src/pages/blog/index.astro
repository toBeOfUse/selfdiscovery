---
import Post from "../../components/Post.astro";
import Island from "../../layouts/Island.astro";

import { getCollection } from "astro:content";
import PageMeta from "../../components/PageMeta.astro";
import BlogIslandContent from "../../components/BlogIslandContent.vue";

const posts = await Promise.all(await getCollection("blog"));

const mapOfTagsToCounts = Array.from(
  posts
    .flatMap((post) => post.data.tags)
    .reduce((acc, tag) => {
      return acc.set(tag, (acc.get(tag) ?? 0) + 1);
    }, new Map<string, number>())
    .entries()
).filter((value) => value[1] > 1);

const sortedTags = Array.from(mapOfTagsToCounts).sort((a, b) => b[1] - a[1]);

// not paginating yet. should start when there are like, > 20 posts. will have to create
// a dynamic route that looks like /blog/[pagenumber]. will have to do the same thing
// for the tags, so it'll be like /blog/tags/[tag]/[pagenumber] (if that's how it works)
const firstPage = posts.sort((a, b) => b.data.date.getTime() - a.data.date.getTime());
---

<Island title="Type Type Type" titleLink="/blog" image="typewriter.png" imageLink="/blog">
  <PageMeta
    slot="head"
    title="Self-Discovery"
    description="My blog, which contains my highly meaningful thoughts."
    image="typewriter.png"
  />
  <div slot="island">
    <BlogIslandContent tagCounts={sortedTags} client:load />
  </div>
  <div class="flex flex-col">
    {
      firstPage.map(async (p, i) => {
        // TODO: something with headings
        return (
          <>
            {i !== 0 && (
              <hr class="block md:hidden my-2 mx-2 border-t-2 border-gray-300" />
            )}
            <Post entry={p} />
          </>
        );
      })
    }
  </div>
</Island>
